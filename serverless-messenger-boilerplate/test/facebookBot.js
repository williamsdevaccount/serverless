'use strict';

// tests for facebookBot
// Generated by serverless-mocha-plugin

const mod = require('../examples/facebook-bot/handler.js');
const mochaPlugin = require('serverless-mocha-plugin');

const lambdaWrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;

const liveFunction = {
  region: process.env.SERVERLESS_REGION,
  lambdaFunction: `${process.env.SERVERLESS_PROJECT}-facebookBot`
};

const wrapped = lambdaWrapper.wrap(mod, {handler: 'handler'});

// Do not actually send messages
process.env.SILENT=1;

describe('Facebook bot service', () => {
  before((done) => {
//  lambdaWrapper.init(liveFunction); // Run the deployed lambda

    done();
  });
  describe('Verify token', () => {
    it('Gives challenge given the right verify token', (done) => {
      const challenge = Date.now();
      wrapped.run({
        method: 'GET',
        query: {
          'hub.verify_token': process.env.FACEBOOK_BOT_VERIFY_TOKEN,
          'hub.challenge': challenge
        },
        stage: 'dev'
      }, (err, response) => {
        expect(challenge).to.be.equal(response.response || '');
        done();
      });
    });

    it('Gives an error given an invalid verify token', (done) => {
      const challenge = Date.now();
      wrapped.run({
        method: 'GET',
        query: {
          'hub.verify_token': 'invalid_token',
          'hub.challenge': challenge
        },
        stage: 'dev'
      }, (err, response) => {
        expect(err.toString().toLowerCase()).to.match(/400.*bad token/);
//        expect(challenge).to.be.equal(response.response || '');
        done();
      });
    });
  });

  describe('Receive / Send messages', () => {
    it('Forwards requests to wit.ai', (done) => {
      wrapped.run({
        method: 'POST',
        stage: 'dev',
        body: {
          entry: [
            {
              messaging: [{
                sender: {
                  id: process.env.FACEBOOK_ID_FOR_TESTS
                },
                message: {
                  text: 'What time is it?'
                }
              }]
            }
          ]
        }
      }, (err, response) => {
        if (err) {
          return done(err);
        }
        const message = response[0] || {};
        expect(message.TopicArn).to.match(/witAiTopic/);
        expect(message.Message).to.match(/What time is it/);
        done();
      });
    });

    it('Send message to Messenger from SNS', (done) => {
      const snsEvent = {
        id: Math.round(Math.random()*10000),
        updated: Date.now(),
        recipient: {
          id: process.env.FACEBOOK_ID_FOR_TESTS,
          name: 'John Smith'
        },
        message: { text: 'Testing Messenger via SNS'},
        stage: 'dev'
      };

      wrapped.run({ Records:
        [{ EventSource: 'aws:sns',
            EventVersion: '1.0',
            EventSubscriptionArn: 'arn:aws:sns:us-east-1:869231578214:sc5-serverless-messenger-bot-witAiTopic-dev:9752702a-cfd3-4711-b0c1-eda9f5f87635',
            Sns: {
              Subject: 'SUBJECT',
              Message: JSON.stringify(snsEvent,null)
            }
        }]
      }, (err, response) => {
        if (err) {
          return done(err);
        }
        if (process.env.SILENT) {
          expect(snsEvent.recipient.id).to.equal(response.recipient.id);
        } else {
          expect(snsEvent.recipient.id).to.equal(response.recipient_id);
        }
        return done();
      });
    });
  });
});


